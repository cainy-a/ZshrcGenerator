@page "/"
@using System.Security.Cryptography
@using System.Net.NetworkInformation
@using System.Threading
@inject IJSRuntime Js

<h1 class="ui header">.zshrc Generator</h1>
<p>
	This tool generates .zshrc files for zsh, using oh-my-zsh for themes and plugins.
</p>

<h2>Step 1: Choose theme</h2>
<select class="ui dropdown" @onchange="d => { ChooseThemeDropDown(d.Value.ToString()); }">
	<option value="">Choose a theme</option>
	<option value="0">Normal (eastwood)</option>
	<option value="1">Powerline (zsh2000)</option>
	<option value="2">Custom</option>
</select>

@switch (_theme)
{
	case Themes.Normal:
		<p>
			You have chosen the normal theme, which is <a target="_blank" href="//github.com/ohmyzsh/ohmyzsh/wiki/Themes#eastwood">eastwood</a>.
		</p>
		break;
	case Themes.Powerline:
		<p>
			You have chosen the Powerline theme, which is <a target="_blank" href="//github.com/maverick9000/zsh2000#zsh2000">zsh2000</a>.
		</p>
		<p>
			IMPORTANT: zsh2000 supports showing information from RVM (Ruby Version Manager).
			If RVM is not installed, this will cause errors. To prevent this, either install RVM or keep the below checkbox unchecked, which disables RVM functionality.
		</p>
		<div class="ui checkbox">
			<input type="checkbox" checked="@_zsh2000Rvm" name="zsh2000-rvm-checkbox" @onchange="c => {Zsh2000Checkbox(c.Value.ToString());}">
			<label>Enable RVM functionality</label>
		</div>
		if (_zsh2000Rvm)
		{
			<div class="ui warning message" style="display: flex">
				<i class="ui info circle icon"></i>
				<div class="header">Make sure you have RVM installed!</div>
			</div>
		}
		break;
	case Themes.Custom:
		<p>
			Please enter the DIRECT link to a .zsh-theme file:
		</p>
		<div class="ui input">
			<input type="text" value="@_customThemeUrl" placeholder="Enter a link..." @onchange="i => {CustomThemeInput(i.Value.ToString());}" />
		</div>
		break;
	case null:
		break;
}

@if (_progress >= 1)
{
	<h2>Step 2: Choose Plugins</h2>
	<p>
		Here, you can choose zsh plugins. You can either pick a built in oh-my-zsh theme, or a custom github link.
	</p>
	<table class="ui celled table">
		<thead>
			<tr>
				<th>Plugin Name</th>
				<th>Built in theme</th>
				<th>Github Link</th>
				<th>Remove Button</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var plugin in _plugins)
			{
				<tr>
					<td>@plugin.Name</td>
					<td>@(plugin.BuiltIn ? "Yes" : "No")</td>
					<td><a target="_blank" href="@plugin.GithubLink">@plugin.GithubLink</a></td>
					<td>
						<button class="ui button" @onclick="() => {_plugins.Remove(plugin);}">Remove</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
	<div class="ui input">
		<input type="text" name="pluginName" placeholder="Plugin Name" @onchange="i => {_newPluginName = i.Value.ToString();}" />
	</div>
	<div class="ui input">
		<input type="text" name="githubLink" placeholder="Plugin Name" @onchange="i => {_newPluginLink = i.Value.ToString();}" />
	</div>
	<button class="ui button" @onclick="() => {_plugins.Add(new Plugin(_newPluginName, string.IsNullOrEmpty(_newPluginLink), _newPluginLink));}">Add plugin</button>
	<p>Leave the github link empty for a built in theme</p>

	<p>
		The <code>git</code> plugin adds nice features for git, such as tab completion.<br/>
		The <code>zsh-syntax-highlighting</code> plugin is very self-explanatory tbh.<br/>
		The <code>zsh-autosuggestions</code> lets you get to your commonly used commands quickly with the right-arrow key.<br/>
		The <code>zsh-256color</code> plugin enables 256 colour support in zsh.
	</p>

	<h2>Step 3: Get your final output!</h2>
}


@code
{
	private Themes? _theme = null;
	private bool _zsh2000Rvm = false;
	private string _customThemeUrl = string.Empty;
	private List<Plugin> _plugins = new List<Plugin>
{
		new Plugin("git", true, ""),
		new Plugin("zsh-syntax-highlighting", false, "https://github.com/zsh-users/zsh-syntax-highlighting"),
		new Plugin("zsh-autosuggestions", false, "https://github.com/zsh-users/zsh-autosuggestions"),
		new Plugin("zsh-256color", false, "https://github.com/chrissicool/zsh-256color")
	};
	private int _progress = 0;
	private string _newPluginName;
	private string _newPluginLink;

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			Js.InvokeVoidAsync("init");
		}
	}

	private void ChooseThemeDropDown(string value)
	{
		if (string.IsNullOrEmpty(value))
			_theme = null;
		else
			switch (value)
			{
				case "0":
					_theme = Themes.Normal;
					if (_progress < 1) _progress = 1;
					break;
				case "1":
					_theme = Themes.Powerline;
					if (_progress < 1) _progress = 1;
					break;
				case "2":
					_theme = Themes.Custom;
					_progress = !string.IsNullOrEmpty(_customThemeUrl) ? 1 : 0;
					break;
				default:
					_theme = null;
					_progress = 0;
					break;
			}
	}

	private void Zsh2000Checkbox(string value) => bool.TryParse(value, out _zsh2000Rvm);
	private void CustomThemeInput(string value)
	{
		_customThemeUrl = value;
		_progress = !string.IsNullOrEmpty(_customThemeUrl) ? 1 : 0;
	}

	enum Themes
	{
		Normal,
		Powerline,
		Custom
	}
}